------------------
MAVEN
    é um gerenciador de depedencias que agiliza o processo de instalação e compatibilidade de versões automaticamente
    o maven faz a leitura da depedencia no pom.xml e realiza a instalação remotamente.
    Maven também possui um repositório local na sua maquina que armazena informações dos pacotes de depedencias em forma de cache.
    caso a importação da depedencia já exista, o maven utiliza o cache se nao, ele faz a instalação remotamente.
------------------

------------------
/mvnw
/mvnw.cmd

    Esses arquivos sao chamados de maven wrapper, permite rodar maven mesmo que ele nao esteja instalado no sistema.
    e garante que a versão do maven esteja correta no seu projeto
    use o comando mvnw.cmd clean install para instalar maven no sistema
    Após isso voce pode usar tanto mvnw ou mvn porque depois usar o comando o maven é instaldo remotamente no seu sistema
-------------------

------------------
/APLICATION.PROPERTIES

    são as configurações que voce pode adicionar no seu projeto, ex:
    server.port=8585

    * configurações de banco de dados.
    * pode definir variaveis customizadas


    # como injetar variaveis definiada no application.properties

    definimos assim:
    coach.name = John Doe


    # e em um classe podemos injetar dessa maneira:

    //@Value("${coach.name}")
    private String coachName;

------------------
/static

    local definido para colocar arquivos estáticos (html, css, images)
------------------

------------------
/templates

    a pasta templates é reservada para templates engines
    são templates engines para rodar html corretamente e visualizar nos browsers 
    o maven disponibiliza essa pasta template para configurar templates engines
    caso queira inserir dados do seu projeto backend na página estática, vai precisar de um template engine para fazer isso.
    e para renderizar a pagina caso um valor atualize, recarregar a pagina ou usar AJAX

------------------


------------------
/test
    pasta reservada para testes funcionais, unitários de integração
------------------


------------------
como buildar e rodar sua aplicação
------------------
    vá até o diretório do seu projeto e no terminal acesse-o
        cd D:\users\projeto
    
    mvnw ou mvn se tiver maven instalado
        mvnw package

    vai ser criado um arquivo na pastar /target/<nome-do-projeto-e-versão>.SNAPSHOT.jar
    ou seja a saída fica em /target/01-course-0.0.1-SNAPSHOT.jar  

    depois...
        java -jar target\01-course-0.0.1-SNAPSHOT.jar
    ou...
        mvnw spring-boot:run (no diretório do projeto)




Anotations
------------------
@Component 

marca a classe como um Bean do spring
Bean é uma classe regular que é gerenciadada pelo spring
também faz a classe ficar disponivel para injeção de depedencia



adicionado outros pacotes fora do pacote princial
------------------
no metodo principal do spring a anotação @SpringBootApplication faz o scan de todos os pacotes e subpacotes
e classes que estão dentro do projeto e registra todos os beans que estão dentro do projeto.
caso um arquivo esteja fora do pacote princial podemos usar uma anotação para registrar outros pacotes.
OBS: repare que usando o nomo scan, deve colocar a pasta principal do projeto e os outros pacotes que deseja registrar.
@SpringBootApplication(scanBasePackages={"com.SpringBoot.util","com.SpringBoot.test", "com.SpringBoot.course"})

------------------

IOC
------------------
Inversão de controle


Em uma aplicação Java típica, as classes frequentemente dependem de outras classes, objetos ou serviços para executar suas funções.
Essas dependências podem ser desafiadoras de gerenciar quando as próprias classes são responsáveis ​​por criá-las ou adquiri-las.
A injeção de dependências resolve esse problema invertendo o controle da criação e do gerenciamento de dependências.
Em vez de uma classe criar suas próprias dependências, as dependências são fornecidas ou "injetadas" de uma fonte externa.
Essa fonte externa pode ser um arquivo de configuração, um contêiner ou outra classe.

Spring é um framework que implementa o padrão IOC nativamente.

------------------

------------------
@qualifier 
é uma anotação que serve para diferenciar dois beans que possuem o mesmo tipo.
quando temos dois beans do mesmo tipo, o spring não sabe qual injetar, então usamos o @qualifier para diferenciar.

    @Autowired
    @Qualifier("bean1")
    private Coach coach;

podemos utilizar o @Primary para definir um bean principal, ou seja, o spring vai injetar esse bean quando não for definido o @qualifier.
    @Primary
    @Bean
    public Coach coach1() {
        return new Coach();
    }

------------------


------------------
@Lazy
    é uma anotação que serve para inicializar o bean apenas quando ele for chamado.
    ou seja, o spring não inicializa o bean na inicialização da aplicação, ele espera ser chamado.
    isso é útil para melhorar a performance da aplicação, pois evita a inicialização de beans que não são utilizados.
    @Lazy
    @Bean
    public Coach coach() {
        return new Coach();
    }

podemos usar a anotação em application.properties
    spring.main.lazy-initialization=true
    ou seja, todos os beans serão inicializados apenas quando forem chamados.
------------------

------------------
beans, componentes serviços ...

como é o scopo de um bean?
default scope é [singleton], ou seja, o spring cria apenas uma instância do bean e compartilha essa instância em toda a aplicação. é feito cache me memória
e todas as injeções de dependência vão ser a mesma instância.

temos o [prototype] que cria uma nova instância do bean toda vez que ele é chamado.
temos o [request] que cria uma nova instância do bean toda vez que uma requisição é feita.
temos o [session] que cria uma nova instância do bean toda vez que uma sessão é criada.
temos o [application] que cria uma nova instância do bean toda vez que a aplicação é iniciada.
temos o [websocket] que cria uma nova instância do bean toda vez que um websocket é criado.

para mudar o scopo use a anotação @Scope
    @Scope("prototype")
    @Component
    public class Coach {
        // código do bean
    }

------------------
Life cycle de um bean


a anotação @PostConstruct é chamada após a injeção de dependência, ou seja, após o bean ser criado e as dependências serem injetadas.
a anotação @PreDestroy é chamada antes do bean ser destruído, ou seja, antes da aplicação ser finalizada.

    @PostConstruct
    public void init() {
        System.out.println("Bean criado");
    }

    @PreDestroy
    public void destroy() {
        System.out.println("Bean destruído");
    }
    o preDestroy é chamado quando a aplicação é finalizada, ou seja, o bean é destruído.

    o @RequestScope é chamado toda vez que uma requisição é feita, ou seja, o bean é criado e destruído a cada requisição.
------------------


------------------
@Configuration 
é uma anotação que indica que a classe é uma classe de configuração do Spring.
ela é usada para definir beans e configurações do Spring.
os metodos com @Bean dentro de uma classe com @Configuration são chamados de métodos de configuração.
    @Configuration
    public class AppConfig {
        @Bean
        public Coach coach() {
            return new Coach();
        }
    }

    o @Bean é usado para definir um bean, ou seja, uma instância de uma classe que será gerenciada pelo Spring.
    o Spring vai chamar o método coach() e registrar o bean no contexto da aplicação.

    podemos usar o @ComponentScan para escanear pacotes e registrar os beans automaticamente.
    @ComponentScan("com.SpringBoot.course")
------------------

------------------
HIBERNATE
    Hibernate é um framework de mapeamento objeto-relacional (orm) que facilita a interação entre aplicações java e banco de dados relacionais.
    para se comunicar com o banco de dados temos o JDBC que é uma api que se comunica com o banco de dados. entao o JPA hibernate utiliza o JDBC para se comunicar com o banco de dados.
------------------

------------------
JDBC > java database connectivity
    é uma API que permite que aplicações Java se conectem a bancos de dados relacionais.
    o JDBC fornece uma interface para executar consultas SQL, recuperar resultados e manipular dados em bancos de dados.
    o JDBC é uma API de baixo nível, ou seja, é necessário escrever código SQL para interagir com o banco de dados.
    o JDBC é usado pelo Hibernate para se comunicar com o banco de dados.

------------------

------------------
JPA > java persistence API
    é uma especificação que define como as aplicações Java podem interagir com bancos de dados relacionais.
    o JPA fornece uma abstração sobre o JDBC, ou seja, não é necessário escrever código SQL para interagir com o banco de dados.
    o JPA é usado pelo Hibernate para mapear objetos Java para tabelas do banco de dados e vice-versa.
    o JPA é uma especificação, ou seja, é implementado por diferentes frameworks, como o Hibernate.
------------------



------------------
Hibernate ddl auto Configuration
    por default none é aplicado. 
    "create" -> remove as tabelas do banco e cria novamente
    "create-drop" -> remove as tabelas do banco e cria novamente, mas ao finalizar a aplicação, as tabelas são removidas, muito util para testes unitários 
    "update" -> atualiza as tabelas do banco de dados, ou seja, adiciona novas colunas, remove colunas que não existem mais, mas não remove as tabelas.


------------------
[Applicatiion.properties]

    #disable spring banner
    spring.main.banner-mode=off
    # display only warnings
    logging.level.root=warn
------------------